// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RoleInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RoleData {

  /// <summary>Holder for reflection information generated from RoleInfo.proto</summary>
  public static partial class RoleInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for RoleInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoleInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Sb2xlSW5mby5wcm90bxIIUm9sZURhdGEi5gEKCEdhbWVJbmZvEi8KDHBs",
            "YXllclBlb3BsZRgBIAEoCzIZLlJvbGVEYXRhLlBlb3BsZVByb3RvRGF0YRIw",
            "Cg1hbGxQZW9wbGVMaXN0GAIgAygLMhkuUm9sZURhdGEuUGVvcGxlUHJvdG9E",
            "YXRhEiQKCHRpbWVEYXRhGAMgASgLMhIuUm9sZURhdGEuVGltZURhdGESFQoN",
            "Y3VyR2FtZU1vZHVsZRgEIAEoBRINCgV0aGVJZBgFIAEoBBIrCg1jdXJBY3Rp",
            "b25EYXRhGAYgASgLMhQuUm9sZURhdGEuQWN0aW9uRGF0YSJzCghUaW1lRGF0",
            "YRIMCgR5ZWFyGAEgASgFEg0KBW1vbnRoGAIgASgFEgsKA2RheRgDIAEoBRIS",
            "Cgp0aGVXZWVrRGF5GAQgASgFEhIKCmRheVByb2Nlc3MYBSABKAISFQoNZGF5",
            "QmVmb3JlRXhhbRgGIAEoBSK0AQoLT25lQ2hhdERhdGESDAoEeWVhchgBIAEo",
            "BRINCgVtb250aBgCIAEoBRILCgNkYXkYAyABKAUSDwoHY29udGVudBgEIAEo",
            "CRIQCghpc1BsYXllchgFIAEoCBIPCgdjaGVja2VkGAYgASgIEg4KBmJlbG9u",
            "ZxgHIAEoBBIQCghjaGF0VHlwZRgIIAEoBRIWCg5pbnZpdGVBY3Rpb25JZBgJ",
            "IAEoBRINCgV2YWxpZBgKIAEoCCIdCgpBY3Rpb25EYXRhEg8KB3Byb2Nlc3MY",
            "ASABKAIiUwoUU2luZ2xlUGVvcGxlQ2hhdERhdGESDgoGYmVsb25nGAEgASgE",
            "EisKDGNoYXREYXRhTGlzdBgCIAMoCzIVLlJvbGVEYXRhLk9uZUNoYXREYXRh",
            "IqYCCgxQcm9wZXJ0eURhdGESFgoOcHJvcGVydHlJZExpc3QYASADKAUSNgoQ",
            "cHJvcGVydHlEYXRhTGlzdBgCIAMoCzIcLlJvbGVEYXRhLlNpbmdsZVByb3Bl",
            "cnR5RGF0YRIaChJleGFtUHJvcGVydHlJZExpc3QYAyADKAUSOgoUZXhhbVBy",
            "b3BlcnR5RGF0YUxpc3QYBCADKAsyHC5Sb2xlRGF0YS5TaW5nbGVQcm9wZXJ0",
            "eURhdGESHQoVY3VyRXhhbVByb3BlcnR5SWRMaXN0GAUgAygFEj0KF2N1ckV4",
            "YW1Qcm9wZXJ0eURhdGFMaXN0GAYgAygLMhwuUm9sZURhdGEuU2luZ2xlUHJv",
            "cGVydHlEYXRhEhAKCGlzUGxheWVyGAcgASgIIlQKElNpbmdsZVByb3BlcnR5",
            "RGF0YRISCgpwcm9wZXJ0eUlkGAEgASgFEhMKC3Byb3BlcnR5TnVtGAIgASgF",
            "EhUKDXByb3BlcnR5TGltaXQYAyABKAUilAUKD1Blb3BsZVByb3RvRGF0YRIO",
            "CgZvbmx5SWQYASABKAQSLAoMcHJvcGVydHlEYXRhGAIgASgLMhYuUm9sZURh",
            "dGEuUHJvcGVydHlEYXRhEh8KF3NlbnNlZE90aGVyUGVvcGxlSWRMaXN0GAMg",
            "AygEEisKI2ZyaWVuZGxpbmVzc1RvU2Vuc2VkT3RoZXJQZW9wbGVMaXN0GAQg",
            "AygFEg4KBmdlbmRlchgFIAEoBRIMCgRuYW1lGAYgASgJEhAKCGFjdGlvbklk",
            "GAcgASgFEhsKE2ZpbmlzaEludml0ZVByb2Nlc3MYCCABKAgSNAoRbWVJbnZp",
            "dGVPdGhlckxpc3QYCSADKAsyGS5Sb2xlRGF0YS5QZW9wbGVQcm90b0RhdGES",
            "NAoRb3RoZXJJbnZpdGVNZUxpc3QYCiADKAsyGS5Sb2xlRGF0YS5QZW9wbGVQ",
            "cm90b0RhdGESEgoKcmVjb3JkTGlzdBgLIAMoCRIuCgtjaGF0RnJpZW5kcxgM",
            "IAMoCzIZLlJvbGVEYXRhLlBlb3BsZVByb3RvRGF0YRIQCghpc1BsYXllchgN",
            "IAEoCBIXCg9jaG9vc2VkQWN0aW9uSWQYDiABKAUSQwobQWxsU2luZ2xlUGVv",
            "cGxlQ2hhdERhdGFMaXN0GA8gAygLMh4uUm9sZURhdGEuU2luZ2xlUGVvcGxl",
            "Q2hhdERhdGESFwoPdmFsaWRXaXRoUGVvcGxlGBAgAygEEhwKFHBsYXllclZv",
            "Y2FsUmVmdXNlZE1lGBEgASgIEhkKEWN1clBsYW5XaXRoUGVvcGxlGBIgASgE",
            "EhkKEWV4YW1CYXR0bGVfY3VyRXhwGBMgASgFEhsKE2V4YW1CYXR0bGVfY3Vy",
            "TGV2ZWwYFCABKAUibwoNUGxhblByb3RvRGF0YRIlCgJwMRgBIAEoCzIZLlJv",
            "bGVEYXRhLlBlb3BsZVByb3RvRGF0YRIlCgJwMhgCIAEoCzIZLlJvbGVEYXRh",
            "LlBlb3BsZVByb3RvRGF0YRIQCghhY3Rpb25JZBgDIAEoBSI+ChFPdGhlcklu",
            "dml0ZU1lRGF0YRIpCgZwZW9wbGUYASABKAsyGS5Sb2xlRGF0YS5QZW9wbGVQ",
            "cm90b0RhdGEiVAoWTWVJbnZpdGVPdGhlclByb3RvRGF0YRIpCgZwZW9wbGUY",
            "ASABKAsyGS5Sb2xlRGF0YS5QZW9wbGVQcm90b0RhdGESDwoHcmVmdXNlZBgC",
            "IAEoCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.GameInfo), global::RoleData.GameInfo.Parser, new[]{ "PlayerPeople", "AllPeopleList", "TimeData", "CurGameModule", "TheId", "CurActionData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.TimeData), global::RoleData.TimeData.Parser, new[]{ "Year", "Month", "Day", "TheWeekDay", "DayProcess", "DayBeforeExam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.OneChatData), global::RoleData.OneChatData.Parser, new[]{ "Year", "Month", "Day", "Content", "IsPlayer", "Checked", "Belong", "ChatType", "InviteActionId", "Valid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.ActionData), global::RoleData.ActionData.Parser, new[]{ "Process" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.SinglePeopleChatData), global::RoleData.SinglePeopleChatData.Parser, new[]{ "Belong", "ChatDataList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.PropertyData), global::RoleData.PropertyData.Parser, new[]{ "PropertyIdList", "PropertyDataList", "ExamPropertyIdList", "ExamPropertyDataList", "CurExamPropertyIdList", "CurExamPropertyDataList", "IsPlayer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.SinglePropertyData), global::RoleData.SinglePropertyData.Parser, new[]{ "PropertyId", "PropertyNum", "PropertyLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.PeopleProtoData), global::RoleData.PeopleProtoData.Parser, new[]{ "OnlyId", "PropertyData", "SensedOtherPeopleIdList", "FriendlinessToSensedOtherPeopleList", "Gender", "Name", "ActionId", "FinishInviteProcess", "MeInviteOtherList", "OtherInviteMeList", "RecordList", "ChatFriends", "IsPlayer", "ChoosedActionId", "AllSinglePeopleChatDataList", "ValidWithPeople", "PlayerVocalRefusedMe", "CurPlanWithPeople", "ExamBattleCurExp", "ExamBattleCurLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.PlanProtoData), global::RoleData.PlanProtoData.Parser, new[]{ "P1", "P2", "ActionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.OtherInviteMeData), global::RoleData.OtherInviteMeData.Parser, new[]{ "People" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.MeInviteOtherProtoData), global::RoleData.MeInviteOtherProtoData.Parser, new[]{ "People", "Refused" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///游戏基本信息
  /// </summary>
  public sealed partial class GameInfo : pb::IMessage<GameInfo> {
    private static readonly pb::MessageParser<GameInfo> _parser = new pb::MessageParser<GameInfo>(() => new GameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo(GameInfo other) : this() {
      PlayerPeople = other.playerPeople_ != null ? other.PlayerPeople.Clone() : null;
      allPeopleList_ = other.allPeopleList_.Clone();
      TimeData = other.timeData_ != null ? other.TimeData.Clone() : null;
      curGameModule_ = other.curGameModule_;
      theId_ = other.theId_;
      CurActionData = other.curActionData_ != null ? other.CurActionData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo Clone() {
      return new GameInfo(this);
    }

    /// <summary>Field number for the "playerPeople" field.</summary>
    public const int PlayerPeopleFieldNumber = 1;
    private global::RoleData.PeopleProtoData playerPeople_;
    /// <summary>
    ///玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.PeopleProtoData PlayerPeople {
      get { return playerPeople_; }
      set {
        playerPeople_ = value;
      }
    }

    /// <summary>Field number for the "allPeopleList" field.</summary>
    public const int AllPeopleListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RoleData.PeopleProtoData> _repeated_allPeopleList_codec
        = pb::FieldCodec.ForMessage(18, global::RoleData.PeopleProtoData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.PeopleProtoData> allPeopleList_ = new pbc::RepeatedField<global::RoleData.PeopleProtoData>();
    /// <summary>
    ///所有角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.PeopleProtoData> AllPeopleList {
      get { return allPeopleList_; }
    }

    /// <summary>Field number for the "timeData" field.</summary>
    public const int TimeDataFieldNumber = 3;
    private global::RoleData.TimeData timeData_;
    /// <summary>
    ///日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.TimeData TimeData {
      get { return timeData_; }
      set {
        timeData_ = value;
      }
    }

    /// <summary>Field number for the "curGameModule" field.</summary>
    public const int CurGameModuleFieldNumber = 4;
    private int curGameModule_;
    /// <summary>
    ///当前是哪个游戏模块
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurGameModule {
      get { return curGameModule_; }
      set {
        curGameModule_ = value;
      }
    }

    /// <summary>Field number for the "theId" field.</summary>
    public const int TheIdFieldNumber = 5;
    private ulong theId_;
    /// <summary>
    ///setid用的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TheId {
      get { return theId_; }
      set {
        theId_ = value;
      }
    }

    /// <summary>Field number for the "curActionData" field.</summary>
    public const int CurActionDataFieldNumber = 6;
    private global::RoleData.ActionData curActionData_;
    /// <summary>
    ///当前行动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.ActionData CurActionData {
      get { return curActionData_; }
      set {
        curActionData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerPeople, other.PlayerPeople)) return false;
      if(!allPeopleList_.Equals(other.allPeopleList_)) return false;
      if (!object.Equals(TimeData, other.TimeData)) return false;
      if (CurGameModule != other.CurGameModule) return false;
      if (TheId != other.TheId) return false;
      if (!object.Equals(CurActionData, other.CurActionData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerPeople_ != null) hash ^= PlayerPeople.GetHashCode();
      hash ^= allPeopleList_.GetHashCode();
      if (timeData_ != null) hash ^= TimeData.GetHashCode();
      if (CurGameModule != 0) hash ^= CurGameModule.GetHashCode();
      if (TheId != 0UL) hash ^= TheId.GetHashCode();
      if (curActionData_ != null) hash ^= CurActionData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerPeople_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerPeople);
      }
      allPeopleList_.WriteTo(output, _repeated_allPeopleList_codec);
      if (timeData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TimeData);
      }
      if (CurGameModule != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurGameModule);
      }
      if (TheId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TheId);
      }
      if (curActionData_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CurActionData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerPeople_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerPeople);
      }
      size += allPeopleList_.CalculateSize(_repeated_allPeopleList_codec);
      if (timeData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeData);
      }
      if (CurGameModule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurGameModule);
      }
      if (TheId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TheId);
      }
      if (curActionData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurActionData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInfo other) {
      if (other == null) {
        return;
      }
      if (other.playerPeople_ != null) {
        if (playerPeople_ == null) {
          playerPeople_ = new global::RoleData.PeopleProtoData();
        }
        PlayerPeople.MergeFrom(other.PlayerPeople);
      }
      allPeopleList_.Add(other.allPeopleList_);
      if (other.timeData_ != null) {
        if (timeData_ == null) {
          timeData_ = new global::RoleData.TimeData();
        }
        TimeData.MergeFrom(other.TimeData);
      }
      if (other.CurGameModule != 0) {
        CurGameModule = other.CurGameModule;
      }
      if (other.TheId != 0UL) {
        TheId = other.TheId;
      }
      if (other.curActionData_ != null) {
        if (curActionData_ == null) {
          curActionData_ = new global::RoleData.ActionData();
        }
        CurActionData.MergeFrom(other.CurActionData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerPeople_ == null) {
              playerPeople_ = new global::RoleData.PeopleProtoData();
            }
            input.ReadMessage(playerPeople_);
            break;
          }
          case 18: {
            allPeopleList_.AddEntriesFrom(input, _repeated_allPeopleList_codec);
            break;
          }
          case 26: {
            if (timeData_ == null) {
              timeData_ = new global::RoleData.TimeData();
            }
            input.ReadMessage(timeData_);
            break;
          }
          case 32: {
            CurGameModule = input.ReadInt32();
            break;
          }
          case 40: {
            TheId = input.ReadUInt64();
            break;
          }
          case 50: {
            if (curActionData_ == null) {
              curActionData_ = new global::RoleData.ActionData();
            }
            input.ReadMessage(curActionData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///日期
  /// </summary>
  public sealed partial class TimeData : pb::IMessage<TimeData> {
    private static readonly pb::MessageParser<TimeData> _parser = new pb::MessageParser<TimeData>(() => new TimeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeData(TimeData other) : this() {
      year_ = other.year_;
      month_ = other.month_;
      day_ = other.day_;
      theWeekDay_ = other.theWeekDay_;
      dayProcess_ = other.dayProcess_;
      dayBeforeExam_ = other.dayBeforeExam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeData Clone() {
      return new TimeData(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    /// <summary>
    ///哪一年
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private int month_;
    /// <summary>
    ///哪一月
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 3;
    private int day_;
    /// <summary>
    ///哪一天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "theWeekDay" field.</summary>
    public const int TheWeekDayFieldNumber = 4;
    private int theWeekDay_;
    /// <summary>
    ///周几
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TheWeekDay {
      get { return theWeekDay_; }
      set {
        theWeekDay_ = value;
      }
    }

    /// <summary>Field number for the "dayProcess" field.</summary>
    public const int DayProcessFieldNumber = 5;
    private float dayProcess_;
    /// <summary>
    ///今天进行到百分之多少了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DayProcess {
      get { return dayProcess_; }
      set {
        dayProcess_ = value;
      }
    }

    /// <summary>Field number for the "dayBeforeExam" field.</summary>
    public const int DayBeforeExamFieldNumber = 6;
    private int dayBeforeExam_;
    /// <summary>
    ///距离高考还有xx天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayBeforeExam {
      get { return dayBeforeExam_; }
      set {
        dayBeforeExam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (Day != other.Day) return false;
      if (TheWeekDay != other.TheWeekDay) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayProcess, other.DayProcess)) return false;
      if (DayBeforeExam != other.DayBeforeExam) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (TheWeekDay != 0) hash ^= TheWeekDay.GetHashCode();
      if (DayProcess != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayProcess);
      if (DayBeforeExam != 0) hash ^= DayBeforeExam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Month);
      }
      if (Day != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Day);
      }
      if (TheWeekDay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TheWeekDay);
      }
      if (DayProcess != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DayProcess);
      }
      if (DayBeforeExam != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DayBeforeExam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Month);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (TheWeekDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TheWeekDay);
      }
      if (DayProcess != 0F) {
        size += 1 + 4;
      }
      if (DayBeforeExam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayBeforeExam);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeData other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.TheWeekDay != 0) {
        TheWeekDay = other.TheWeekDay;
      }
      if (other.DayProcess != 0F) {
        DayProcess = other.DayProcess;
      }
      if (other.DayBeforeExam != 0) {
        DayBeforeExam = other.DayBeforeExam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            Month = input.ReadInt32();
            break;
          }
          case 24: {
            Day = input.ReadInt32();
            break;
          }
          case 32: {
            TheWeekDay = input.ReadInt32();
            break;
          }
          case 45: {
            DayProcess = input.ReadFloat();
            break;
          }
          case 48: {
            DayBeforeExam = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单条聊天数据
  /// </summary>
  public sealed partial class OneChatData : pb::IMessage<OneChatData> {
    private static readonly pb::MessageParser<OneChatData> _parser = new pb::MessageParser<OneChatData>(() => new OneChatData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneChatData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneChatData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneChatData(OneChatData other) : this() {
      year_ = other.year_;
      month_ = other.month_;
      day_ = other.day_;
      content_ = other.content_;
      isPlayer_ = other.isPlayer_;
      checked_ = other.checked_;
      belong_ = other.belong_;
      chatType_ = other.chatType_;
      inviteActionId_ = other.inviteActionId_;
      valid_ = other.valid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneChatData Clone() {
      return new OneChatData(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    /// <summary>
    ///年
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private int month_;
    /// <summary>
    ///月
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 3;
    private int day_;
    /// <summary>
    ///日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 4;
    private string content_ = "";
    /// <summary>
    ///内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isPlayer" field.</summary>
    public const int IsPlayerFieldNumber = 5;
    private bool isPlayer_;
    /// <summary>
    ///是玩家的聊天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayer {
      get { return isPlayer_; }
      set {
        isPlayer_ = value;
      }
    }

    /// <summary>Field number for the "checked" field.</summary>
    public const int CheckedFieldNumber = 6;
    private bool checked_;
    /// <summary>
    ///已读
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Checked {
      get { return checked_; }
      set {
        checked_ = value;
      }
    }

    /// <summary>Field number for the "belong" field.</summary>
    public const int BelongFieldNumber = 7;
    private ulong belong_;
    /// <summary>
    ///谁的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Belong {
      get { return belong_; }
      set {
        belong_ = value;
      }
    }

    /// <summary>Field number for the "chatType" field.</summary>
    public const int ChatTypeFieldNumber = 8;
    private int chatType_;
    /// <summary>
    ///聊天类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "inviteActionId" field.</summary>
    public const int InviteActionIdFieldNumber = 9;
    private int inviteActionId_;
    /// <summary>
    ///邀请干啥
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InviteActionId {
      get { return inviteActionId_; }
      set {
        inviteActionId_ = value;
      }
    }

    /// <summary>Field number for the "valid" field.</summary>
    public const int ValidFieldNumber = 10;
    private bool valid_;
    /// <summary>
    ///有效（可以回复等操作，下一句说出来以后就失效）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Valid {
      get { return valid_; }
      set {
        valid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneChatData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneChatData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (Day != other.Day) return false;
      if (Content != other.Content) return false;
      if (IsPlayer != other.IsPlayer) return false;
      if (Checked != other.Checked) return false;
      if (Belong != other.Belong) return false;
      if (ChatType != other.ChatType) return false;
      if (InviteActionId != other.InviteActionId) return false;
      if (Valid != other.Valid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (IsPlayer != false) hash ^= IsPlayer.GetHashCode();
      if (Checked != false) hash ^= Checked.GetHashCode();
      if (Belong != 0UL) hash ^= Belong.GetHashCode();
      if (ChatType != 0) hash ^= ChatType.GetHashCode();
      if (InviteActionId != 0) hash ^= InviteActionId.GetHashCode();
      if (Valid != false) hash ^= Valid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Month);
      }
      if (Day != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Day);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Content);
      }
      if (IsPlayer != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPlayer);
      }
      if (Checked != false) {
        output.WriteRawTag(48);
        output.WriteBool(Checked);
      }
      if (Belong != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Belong);
      }
      if (ChatType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ChatType);
      }
      if (InviteActionId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(InviteActionId);
      }
      if (Valid != false) {
        output.WriteRawTag(80);
        output.WriteBool(Valid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Month);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (IsPlayer != false) {
        size += 1 + 1;
      }
      if (Checked != false) {
        size += 1 + 1;
      }
      if (Belong != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Belong);
      }
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChatType);
      }
      if (InviteActionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InviteActionId);
      }
      if (Valid != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneChatData other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.IsPlayer != false) {
        IsPlayer = other.IsPlayer;
      }
      if (other.Checked != false) {
        Checked = other.Checked;
      }
      if (other.Belong != 0UL) {
        Belong = other.Belong;
      }
      if (other.ChatType != 0) {
        ChatType = other.ChatType;
      }
      if (other.InviteActionId != 0) {
        InviteActionId = other.InviteActionId;
      }
      if (other.Valid != false) {
        Valid = other.Valid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            Month = input.ReadInt32();
            break;
          }
          case 24: {
            Day = input.ReadInt32();
            break;
          }
          case 34: {
            Content = input.ReadString();
            break;
          }
          case 40: {
            IsPlayer = input.ReadBool();
            break;
          }
          case 48: {
            Checked = input.ReadBool();
            break;
          }
          case 56: {
            Belong = input.ReadUInt64();
            break;
          }
          case 64: {
            ChatType = input.ReadInt32();
            break;
          }
          case 72: {
            InviteActionId = input.ReadInt32();
            break;
          }
          case 80: {
            Valid = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///行动数据
  /// </summary>
  public sealed partial class ActionData : pb::IMessage<ActionData> {
    private static readonly pb::MessageParser<ActionData> _parser = new pb::MessageParser<ActionData>(() => new ActionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionData(ActionData other) : this() {
      process_ = other.process_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionData Clone() {
      return new ActionData(this);
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 1;
    private float process_;
    /// <summary>
    ///进度 到百分之多少了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Process, other.Process)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Process != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Process);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Process != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Process);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Process != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionData other) {
      if (other == null) {
        return;
      }
      if (other.Process != 0F) {
        Process = other.Process;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Process = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///和单个人的聊天数据
  /// </summary>
  public sealed partial class SinglePeopleChatData : pb::IMessage<SinglePeopleChatData> {
    private static readonly pb::MessageParser<SinglePeopleChatData> _parser = new pb::MessageParser<SinglePeopleChatData>(() => new SinglePeopleChatData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SinglePeopleChatData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePeopleChatData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePeopleChatData(SinglePeopleChatData other) : this() {
      belong_ = other.belong_;
      chatDataList_ = other.chatDataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePeopleChatData Clone() {
      return new SinglePeopleChatData(this);
    }

    /// <summary>Field number for the "belong" field.</summary>
    public const int BelongFieldNumber = 1;
    private ulong belong_;
    /// <summary>
    ///和谁聊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Belong {
      get { return belong_; }
      set {
        belong_ = value;
      }
    }

    /// <summary>Field number for the "chatDataList" field.</summary>
    public const int ChatDataListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RoleData.OneChatData> _repeated_chatDataList_codec
        = pb::FieldCodec.ForMessage(18, global::RoleData.OneChatData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.OneChatData> chatDataList_ = new pbc::RepeatedField<global::RoleData.OneChatData>();
    /// <summary>
    ///1条聊天内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.OneChatData> ChatDataList {
      get { return chatDataList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SinglePeopleChatData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SinglePeopleChatData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Belong != other.Belong) return false;
      if(!chatDataList_.Equals(other.chatDataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Belong != 0UL) hash ^= Belong.GetHashCode();
      hash ^= chatDataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Belong != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Belong);
      }
      chatDataList_.WriteTo(output, _repeated_chatDataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Belong != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Belong);
      }
      size += chatDataList_.CalculateSize(_repeated_chatDataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SinglePeopleChatData other) {
      if (other == null) {
        return;
      }
      if (other.Belong != 0UL) {
        Belong = other.Belong;
      }
      chatDataList_.Add(other.chatDataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Belong = input.ReadUInt64();
            break;
          }
          case 18: {
            chatDataList_.AddEntriesFrom(input, _repeated_chatDataList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///属性 
  /// </summary>
  public sealed partial class PropertyData : pb::IMessage<PropertyData> {
    private static readonly pb::MessageParser<PropertyData> _parser = new pb::MessageParser<PropertyData>(() => new PropertyData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyData(PropertyData other) : this() {
      propertyIdList_ = other.propertyIdList_.Clone();
      propertyDataList_ = other.propertyDataList_.Clone();
      examPropertyIdList_ = other.examPropertyIdList_.Clone();
      examPropertyDataList_ = other.examPropertyDataList_.Clone();
      curExamPropertyIdList_ = other.curExamPropertyIdList_.Clone();
      curExamPropertyDataList_ = other.curExamPropertyDataList_.Clone();
      isPlayer_ = other.isPlayer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyData Clone() {
      return new PropertyData(this);
    }

    /// <summary>Field number for the "propertyIdList" field.</summary>
    public const int PropertyIdListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_propertyIdList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> propertyIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PropertyIdList {
      get { return propertyIdList_; }
    }

    /// <summary>Field number for the "propertyDataList" field.</summary>
    public const int PropertyDataListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RoleData.SinglePropertyData> _repeated_propertyDataList_codec
        = pb::FieldCodec.ForMessage(18, global::RoleData.SinglePropertyData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.SinglePropertyData> propertyDataList_ = new pbc::RepeatedField<global::RoleData.SinglePropertyData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.SinglePropertyData> PropertyDataList {
      get { return propertyDataList_; }
    }

    /// <summary>Field number for the "examPropertyIdList" field.</summary>
    public const int ExamPropertyIdListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_examPropertyIdList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> examPropertyIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ExamPropertyIdList {
      get { return examPropertyIdList_; }
    }

    /// <summary>Field number for the "examPropertyDataList" field.</summary>
    public const int ExamPropertyDataListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::RoleData.SinglePropertyData> _repeated_examPropertyDataList_codec
        = pb::FieldCodec.ForMessage(34, global::RoleData.SinglePropertyData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.SinglePropertyData> examPropertyDataList_ = new pbc::RepeatedField<global::RoleData.SinglePropertyData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.SinglePropertyData> ExamPropertyDataList {
      get { return examPropertyDataList_; }
    }

    /// <summary>Field number for the "curExamPropertyIdList" field.</summary>
    public const int CurExamPropertyIdListFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_curExamPropertyIdList_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> curExamPropertyIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CurExamPropertyIdList {
      get { return curExamPropertyIdList_; }
    }

    /// <summary>Field number for the "curExamPropertyDataList" field.</summary>
    public const int CurExamPropertyDataListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::RoleData.SinglePropertyData> _repeated_curExamPropertyDataList_codec
        = pb::FieldCodec.ForMessage(50, global::RoleData.SinglePropertyData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.SinglePropertyData> curExamPropertyDataList_ = new pbc::RepeatedField<global::RoleData.SinglePropertyData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.SinglePropertyData> CurExamPropertyDataList {
      get { return curExamPropertyDataList_; }
    }

    /// <summary>Field number for the "isPlayer" field.</summary>
    public const int IsPlayerFieldNumber = 7;
    private bool isPlayer_;
    /// <summary>
    ///是玩家的属性（不是怪物（试卷）的）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayer {
      get { return isPlayer_; }
      set {
        isPlayer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!propertyIdList_.Equals(other.propertyIdList_)) return false;
      if(!propertyDataList_.Equals(other.propertyDataList_)) return false;
      if(!examPropertyIdList_.Equals(other.examPropertyIdList_)) return false;
      if(!examPropertyDataList_.Equals(other.examPropertyDataList_)) return false;
      if(!curExamPropertyIdList_.Equals(other.curExamPropertyIdList_)) return false;
      if(!curExamPropertyDataList_.Equals(other.curExamPropertyDataList_)) return false;
      if (IsPlayer != other.IsPlayer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= propertyIdList_.GetHashCode();
      hash ^= propertyDataList_.GetHashCode();
      hash ^= examPropertyIdList_.GetHashCode();
      hash ^= examPropertyDataList_.GetHashCode();
      hash ^= curExamPropertyIdList_.GetHashCode();
      hash ^= curExamPropertyDataList_.GetHashCode();
      if (IsPlayer != false) hash ^= IsPlayer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      propertyIdList_.WriteTo(output, _repeated_propertyIdList_codec);
      propertyDataList_.WriteTo(output, _repeated_propertyDataList_codec);
      examPropertyIdList_.WriteTo(output, _repeated_examPropertyIdList_codec);
      examPropertyDataList_.WriteTo(output, _repeated_examPropertyDataList_codec);
      curExamPropertyIdList_.WriteTo(output, _repeated_curExamPropertyIdList_codec);
      curExamPropertyDataList_.WriteTo(output, _repeated_curExamPropertyDataList_codec);
      if (IsPlayer != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsPlayer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += propertyIdList_.CalculateSize(_repeated_propertyIdList_codec);
      size += propertyDataList_.CalculateSize(_repeated_propertyDataList_codec);
      size += examPropertyIdList_.CalculateSize(_repeated_examPropertyIdList_codec);
      size += examPropertyDataList_.CalculateSize(_repeated_examPropertyDataList_codec);
      size += curExamPropertyIdList_.CalculateSize(_repeated_curExamPropertyIdList_codec);
      size += curExamPropertyDataList_.CalculateSize(_repeated_curExamPropertyDataList_codec);
      if (IsPlayer != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertyData other) {
      if (other == null) {
        return;
      }
      propertyIdList_.Add(other.propertyIdList_);
      propertyDataList_.Add(other.propertyDataList_);
      examPropertyIdList_.Add(other.examPropertyIdList_);
      examPropertyDataList_.Add(other.examPropertyDataList_);
      curExamPropertyIdList_.Add(other.curExamPropertyIdList_);
      curExamPropertyDataList_.Add(other.curExamPropertyDataList_);
      if (other.IsPlayer != false) {
        IsPlayer = other.IsPlayer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            propertyIdList_.AddEntriesFrom(input, _repeated_propertyIdList_codec);
            break;
          }
          case 18: {
            propertyDataList_.AddEntriesFrom(input, _repeated_propertyDataList_codec);
            break;
          }
          case 26:
          case 24: {
            examPropertyIdList_.AddEntriesFrom(input, _repeated_examPropertyIdList_codec);
            break;
          }
          case 34: {
            examPropertyDataList_.AddEntriesFrom(input, _repeated_examPropertyDataList_codec);
            break;
          }
          case 42:
          case 40: {
            curExamPropertyIdList_.AddEntriesFrom(input, _repeated_curExamPropertyIdList_codec);
            break;
          }
          case 50: {
            curExamPropertyDataList_.AddEntriesFrom(input, _repeated_curExamPropertyDataList_codec);
            break;
          }
          case 56: {
            IsPlayer = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单个普通属性
  /// </summary>
  public sealed partial class SinglePropertyData : pb::IMessage<SinglePropertyData> {
    private static readonly pb::MessageParser<SinglePropertyData> _parser = new pb::MessageParser<SinglePropertyData>(() => new SinglePropertyData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SinglePropertyData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePropertyData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePropertyData(SinglePropertyData other) : this() {
      propertyId_ = other.propertyId_;
      propertyNum_ = other.propertyNum_;
      propertyLimit_ = other.propertyLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePropertyData Clone() {
      return new SinglePropertyData(this);
    }

    /// <summary>Field number for the "propertyId" field.</summary>
    public const int PropertyIdFieldNumber = 1;
    private int propertyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropertyId {
      get { return propertyId_; }
      set {
        propertyId_ = value;
      }
    }

    /// <summary>Field number for the "propertyNum" field.</summary>
    public const int PropertyNumFieldNumber = 2;
    private int propertyNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropertyNum {
      get { return propertyNum_; }
      set {
        propertyNum_ = value;
      }
    }

    /// <summary>Field number for the "propertyLimit" field.</summary>
    public const int PropertyLimitFieldNumber = 3;
    private int propertyLimit_;
    /// <summary>
    ///上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropertyLimit {
      get { return propertyLimit_; }
      set {
        propertyLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SinglePropertyData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SinglePropertyData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyId != other.PropertyId) return false;
      if (PropertyNum != other.PropertyNum) return false;
      if (PropertyLimit != other.PropertyLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyId != 0) hash ^= PropertyId.GetHashCode();
      if (PropertyNum != 0) hash ^= PropertyNum.GetHashCode();
      if (PropertyLimit != 0) hash ^= PropertyLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropertyId);
      }
      if (PropertyNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropertyNum);
      }
      if (PropertyLimit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PropertyLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyId);
      }
      if (PropertyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyNum);
      }
      if (PropertyLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SinglePropertyData other) {
      if (other == null) {
        return;
      }
      if (other.PropertyId != 0) {
        PropertyId = other.PropertyId;
      }
      if (other.PropertyNum != 0) {
        PropertyNum = other.PropertyNum;
      }
      if (other.PropertyLimit != 0) {
        PropertyLimit = other.PropertyLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropertyId = input.ReadInt32();
            break;
          }
          case 16: {
            PropertyNum = input.ReadInt32();
            break;
          }
          case 24: {
            PropertyLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色数据
  /// </summary>
  public sealed partial class PeopleProtoData : pb::IMessage<PeopleProtoData> {
    private static readonly pb::MessageParser<PeopleProtoData> _parser = new pb::MessageParser<PeopleProtoData>(() => new PeopleProtoData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeopleProtoData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeopleProtoData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeopleProtoData(PeopleProtoData other) : this() {
      onlyId_ = other.onlyId_;
      PropertyData = other.propertyData_ != null ? other.PropertyData.Clone() : null;
      sensedOtherPeopleIdList_ = other.sensedOtherPeopleIdList_.Clone();
      friendlinessToSensedOtherPeopleList_ = other.friendlinessToSensedOtherPeopleList_.Clone();
      gender_ = other.gender_;
      name_ = other.name_;
      actionId_ = other.actionId_;
      finishInviteProcess_ = other.finishInviteProcess_;
      meInviteOtherList_ = other.meInviteOtherList_.Clone();
      otherInviteMeList_ = other.otherInviteMeList_.Clone();
      recordList_ = other.recordList_.Clone();
      chatFriends_ = other.chatFriends_.Clone();
      isPlayer_ = other.isPlayer_;
      choosedActionId_ = other.choosedActionId_;
      allSinglePeopleChatDataList_ = other.allSinglePeopleChatDataList_.Clone();
      validWithPeople_ = other.validWithPeople_.Clone();
      playerVocalRefusedMe_ = other.playerVocalRefusedMe_;
      curPlanWithPeople_ = other.curPlanWithPeople_;
      examBattleCurExp_ = other.examBattleCurExp_;
      examBattleCurLevel_ = other.examBattleCurLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeopleProtoData Clone() {
      return new PeopleProtoData(this);
    }

    /// <summary>Field number for the "onlyId" field.</summary>
    public const int OnlyIdFieldNumber = 1;
    private ulong onlyId_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OnlyId {
      get { return onlyId_; }
      set {
        onlyId_ = value;
      }
    }

    /// <summary>Field number for the "propertyData" field.</summary>
    public const int PropertyDataFieldNumber = 2;
    private global::RoleData.PropertyData propertyData_;
    /// <summary>
    ///属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.PropertyData PropertyData {
      get { return propertyData_; }
      set {
        propertyData_ = value;
      }
    }

    /// <summary>Field number for the "sensedOtherPeopleIdList" field.</summary>
    public const int SensedOtherPeopleIdListFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_sensedOtherPeopleIdList_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> sensedOtherPeopleIdList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///感受到的其他人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> SensedOtherPeopleIdList {
      get { return sensedOtherPeopleIdList_; }
    }

    /// <summary>Field number for the "friendlinessToSensedOtherPeopleList" field.</summary>
    public const int FriendlinessToSensedOtherPeopleListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_friendlinessToSensedOtherPeopleList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> friendlinessToSensedOtherPeopleList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///对感受到的人的好感度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FriendlinessToSensedOtherPeopleList {
      get { return friendlinessToSensedOtherPeopleList_; }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 5;
    private int gender_;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    /// <summary>
    ///姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actionId" field.</summary>
    public const int ActionIdFieldNumber = 7;
    private int actionId_;
    /// <summary>
    ///想做什么
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionId {
      get { return actionId_; }
      set {
        actionId_ = value;
      }
    }

    /// <summary>Field number for the "finishInviteProcess" field.</summary>
    public const int FinishInviteProcessFieldNumber = 8;
    private bool finishInviteProcess_;
    /// <summary>
    ///结束邀约进程
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FinishInviteProcess {
      get { return finishInviteProcess_; }
      set {
        finishInviteProcess_ = value;
      }
    }

    /// <summary>Field number for the "meInviteOtherList" field.</summary>
    public const int MeInviteOtherListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::RoleData.PeopleProtoData> _repeated_meInviteOtherList_codec
        = pb::FieldCodec.ForMessage(74, global::RoleData.PeopleProtoData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.PeopleProtoData> meInviteOtherList_ = new pbc::RepeatedField<global::RoleData.PeopleProtoData>();
    /// <summary>
    ///我邀请的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.PeopleProtoData> MeInviteOtherList {
      get { return meInviteOtherList_; }
    }

    /// <summary>Field number for the "otherInviteMeList" field.</summary>
    public const int OtherInviteMeListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::RoleData.PeopleProtoData> _repeated_otherInviteMeList_codec
        = pb::FieldCodec.ForMessage(82, global::RoleData.PeopleProtoData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.PeopleProtoData> otherInviteMeList_ = new pbc::RepeatedField<global::RoleData.PeopleProtoData>();
    /// <summary>
    ///邀请我的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.PeopleProtoData> OtherInviteMeList {
      get { return otherInviteMeList_; }
    }

    /// <summary>Field number for the "recordList" field.</summary>
    public const int RecordListFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_recordList_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> recordList_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecordList {
      get { return recordList_; }
    }

    /// <summary>Field number for the "chatFriends" field.</summary>
    public const int ChatFriendsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::RoleData.PeopleProtoData> _repeated_chatFriends_codec
        = pb::FieldCodec.ForMessage(98, global::RoleData.PeopleProtoData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.PeopleProtoData> chatFriends_ = new pbc::RepeatedField<global::RoleData.PeopleProtoData>();
    /// <summary>
    ///通讯录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.PeopleProtoData> ChatFriends {
      get { return chatFriends_; }
    }

    /// <summary>Field number for the "isPlayer" field.</summary>
    public const int IsPlayerFieldNumber = 13;
    private bool isPlayer_;
    /// <summary>
    ///是玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayer {
      get { return isPlayer_; }
      set {
        isPlayer_ = value;
      }
    }

    /// <summary>Field number for the "choosedActionId" field.</summary>
    public const int ChoosedActionIdFieldNumber = 14;
    private int choosedActionId_;
    /// <summary>
    ///确定选择了的活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChoosedActionId {
      get { return choosedActionId_; }
      set {
        choosedActionId_ = value;
      }
    }

    /// <summary>Field number for the "AllSinglePeopleChatDataList" field.</summary>
    public const int AllSinglePeopleChatDataListFieldNumber = 15;
    private static readonly pb::FieldCodec<global::RoleData.SinglePeopleChatData> _repeated_allSinglePeopleChatDataList_codec
        = pb::FieldCodec.ForMessage(122, global::RoleData.SinglePeopleChatData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.SinglePeopleChatData> allSinglePeopleChatDataList_ = new pbc::RepeatedField<global::RoleData.SinglePeopleChatData>();
    /// <summary>
    ///和别人聊天记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.SinglePeopleChatData> AllSinglePeopleChatDataList {
      get { return allSinglePeopleChatDataList_; }
    }

    /// <summary>Field number for the "validWithPeople" field.</summary>
    public const int ValidWithPeopleFieldNumber = 16;
    private static readonly pb::FieldCodec<ulong> _repeated_validWithPeople_codec
        = pb::FieldCodec.ForUInt64(130);
    private readonly pbc::RepeatedField<ulong> validWithPeople_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///可以和谁一起去（答应过自己和邀请自己的）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ValidWithPeople {
      get { return validWithPeople_; }
    }

    /// <summary>Field number for the "playerVocalRefusedMe" field.</summary>
    public const int PlayerVocalRefusedMeFieldNumber = 17;
    private bool playerVocalRefusedMe_;
    /// <summary>
    ///玩家口头拒绝了我（而不是放鸽子）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayerVocalRefusedMe {
      get { return playerVocalRefusedMe_; }
      set {
        playerVocalRefusedMe_ = value;
      }
    }

    /// <summary>Field number for the "curPlanWithPeople" field.</summary>
    public const int CurPlanWithPeopleFieldNumber = 18;
    private ulong curPlanWithPeople_;
    /// <summary>
    ///当前和谁一起去
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CurPlanWithPeople {
      get { return curPlanWithPeople_; }
      set {
        curPlanWithPeople_ = value;
      }
    }

    /// <summary>Field number for the "examBattle_curExp" field.</summary>
    public const int ExamBattleCurExpFieldNumber = 19;
    private int examBattleCurExp_;
    /// <summary>
    ///当前经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExamBattleCurExp {
      get { return examBattleCurExp_; }
      set {
        examBattleCurExp_ = value;
      }
    }

    /// <summary>Field number for the "examBattle_curLevel" field.</summary>
    public const int ExamBattleCurLevelFieldNumber = 20;
    private int examBattleCurLevel_;
    /// <summary>
    ///当前等级TODO这个可以改成由经验算等级 看最终的成长公式是什么
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExamBattleCurLevel {
      get { return examBattleCurLevel_; }
      set {
        examBattleCurLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeopleProtoData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeopleProtoData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlyId != other.OnlyId) return false;
      if (!object.Equals(PropertyData, other.PropertyData)) return false;
      if(!sensedOtherPeopleIdList_.Equals(other.sensedOtherPeopleIdList_)) return false;
      if(!friendlinessToSensedOtherPeopleList_.Equals(other.friendlinessToSensedOtherPeopleList_)) return false;
      if (Gender != other.Gender) return false;
      if (Name != other.Name) return false;
      if (ActionId != other.ActionId) return false;
      if (FinishInviteProcess != other.FinishInviteProcess) return false;
      if(!meInviteOtherList_.Equals(other.meInviteOtherList_)) return false;
      if(!otherInviteMeList_.Equals(other.otherInviteMeList_)) return false;
      if(!recordList_.Equals(other.recordList_)) return false;
      if(!chatFriends_.Equals(other.chatFriends_)) return false;
      if (IsPlayer != other.IsPlayer) return false;
      if (ChoosedActionId != other.ChoosedActionId) return false;
      if(!allSinglePeopleChatDataList_.Equals(other.allSinglePeopleChatDataList_)) return false;
      if(!validWithPeople_.Equals(other.validWithPeople_)) return false;
      if (PlayerVocalRefusedMe != other.PlayerVocalRefusedMe) return false;
      if (CurPlanWithPeople != other.CurPlanWithPeople) return false;
      if (ExamBattleCurExp != other.ExamBattleCurExp) return false;
      if (ExamBattleCurLevel != other.ExamBattleCurLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlyId != 0UL) hash ^= OnlyId.GetHashCode();
      if (propertyData_ != null) hash ^= PropertyData.GetHashCode();
      hash ^= sensedOtherPeopleIdList_.GetHashCode();
      hash ^= friendlinessToSensedOtherPeopleList_.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ActionId != 0) hash ^= ActionId.GetHashCode();
      if (FinishInviteProcess != false) hash ^= FinishInviteProcess.GetHashCode();
      hash ^= meInviteOtherList_.GetHashCode();
      hash ^= otherInviteMeList_.GetHashCode();
      hash ^= recordList_.GetHashCode();
      hash ^= chatFriends_.GetHashCode();
      if (IsPlayer != false) hash ^= IsPlayer.GetHashCode();
      if (ChoosedActionId != 0) hash ^= ChoosedActionId.GetHashCode();
      hash ^= allSinglePeopleChatDataList_.GetHashCode();
      hash ^= validWithPeople_.GetHashCode();
      if (PlayerVocalRefusedMe != false) hash ^= PlayerVocalRefusedMe.GetHashCode();
      if (CurPlanWithPeople != 0UL) hash ^= CurPlanWithPeople.GetHashCode();
      if (ExamBattleCurExp != 0) hash ^= ExamBattleCurExp.GetHashCode();
      if (ExamBattleCurLevel != 0) hash ^= ExamBattleCurLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlyId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(OnlyId);
      }
      if (propertyData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PropertyData);
      }
      sensedOtherPeopleIdList_.WriteTo(output, _repeated_sensedOtherPeopleIdList_codec);
      friendlinessToSensedOtherPeopleList_.WriteTo(output, _repeated_friendlinessToSensedOtherPeopleList_codec);
      if (Gender != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Gender);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (ActionId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ActionId);
      }
      if (FinishInviteProcess != false) {
        output.WriteRawTag(64);
        output.WriteBool(FinishInviteProcess);
      }
      meInviteOtherList_.WriteTo(output, _repeated_meInviteOtherList_codec);
      otherInviteMeList_.WriteTo(output, _repeated_otherInviteMeList_codec);
      recordList_.WriteTo(output, _repeated_recordList_codec);
      chatFriends_.WriteTo(output, _repeated_chatFriends_codec);
      if (IsPlayer != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsPlayer);
      }
      if (ChoosedActionId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ChoosedActionId);
      }
      allSinglePeopleChatDataList_.WriteTo(output, _repeated_allSinglePeopleChatDataList_codec);
      validWithPeople_.WriteTo(output, _repeated_validWithPeople_codec);
      if (PlayerVocalRefusedMe != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(PlayerVocalRefusedMe);
      }
      if (CurPlanWithPeople != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(CurPlanWithPeople);
      }
      if (ExamBattleCurExp != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ExamBattleCurExp);
      }
      if (ExamBattleCurLevel != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ExamBattleCurLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlyId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OnlyId);
      }
      if (propertyData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyData);
      }
      size += sensedOtherPeopleIdList_.CalculateSize(_repeated_sensedOtherPeopleIdList_codec);
      size += friendlinessToSensedOtherPeopleList_.CalculateSize(_repeated_friendlinessToSensedOtherPeopleList_codec);
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ActionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionId);
      }
      if (FinishInviteProcess != false) {
        size += 1 + 1;
      }
      size += meInviteOtherList_.CalculateSize(_repeated_meInviteOtherList_codec);
      size += otherInviteMeList_.CalculateSize(_repeated_otherInviteMeList_codec);
      size += recordList_.CalculateSize(_repeated_recordList_codec);
      size += chatFriends_.CalculateSize(_repeated_chatFriends_codec);
      if (IsPlayer != false) {
        size += 1 + 1;
      }
      if (ChoosedActionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChoosedActionId);
      }
      size += allSinglePeopleChatDataList_.CalculateSize(_repeated_allSinglePeopleChatDataList_codec);
      size += validWithPeople_.CalculateSize(_repeated_validWithPeople_codec);
      if (PlayerVocalRefusedMe != false) {
        size += 2 + 1;
      }
      if (CurPlanWithPeople != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CurPlanWithPeople);
      }
      if (ExamBattleCurExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExamBattleCurExp);
      }
      if (ExamBattleCurLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExamBattleCurLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeopleProtoData other) {
      if (other == null) {
        return;
      }
      if (other.OnlyId != 0UL) {
        OnlyId = other.OnlyId;
      }
      if (other.propertyData_ != null) {
        if (propertyData_ == null) {
          propertyData_ = new global::RoleData.PropertyData();
        }
        PropertyData.MergeFrom(other.PropertyData);
      }
      sensedOtherPeopleIdList_.Add(other.sensedOtherPeopleIdList_);
      friendlinessToSensedOtherPeopleList_.Add(other.friendlinessToSensedOtherPeopleList_);
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ActionId != 0) {
        ActionId = other.ActionId;
      }
      if (other.FinishInviteProcess != false) {
        FinishInviteProcess = other.FinishInviteProcess;
      }
      meInviteOtherList_.Add(other.meInviteOtherList_);
      otherInviteMeList_.Add(other.otherInviteMeList_);
      recordList_.Add(other.recordList_);
      chatFriends_.Add(other.chatFriends_);
      if (other.IsPlayer != false) {
        IsPlayer = other.IsPlayer;
      }
      if (other.ChoosedActionId != 0) {
        ChoosedActionId = other.ChoosedActionId;
      }
      allSinglePeopleChatDataList_.Add(other.allSinglePeopleChatDataList_);
      validWithPeople_.Add(other.validWithPeople_);
      if (other.PlayerVocalRefusedMe != false) {
        PlayerVocalRefusedMe = other.PlayerVocalRefusedMe;
      }
      if (other.CurPlanWithPeople != 0UL) {
        CurPlanWithPeople = other.CurPlanWithPeople;
      }
      if (other.ExamBattleCurExp != 0) {
        ExamBattleCurExp = other.ExamBattleCurExp;
      }
      if (other.ExamBattleCurLevel != 0) {
        ExamBattleCurLevel = other.ExamBattleCurLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OnlyId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (propertyData_ == null) {
              propertyData_ = new global::RoleData.PropertyData();
            }
            input.ReadMessage(propertyData_);
            break;
          }
          case 26:
          case 24: {
            sensedOtherPeopleIdList_.AddEntriesFrom(input, _repeated_sensedOtherPeopleIdList_codec);
            break;
          }
          case 34:
          case 32: {
            friendlinessToSensedOtherPeopleList_.AddEntriesFrom(input, _repeated_friendlinessToSensedOtherPeopleList_codec);
            break;
          }
          case 40: {
            Gender = input.ReadInt32();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 56: {
            ActionId = input.ReadInt32();
            break;
          }
          case 64: {
            FinishInviteProcess = input.ReadBool();
            break;
          }
          case 74: {
            meInviteOtherList_.AddEntriesFrom(input, _repeated_meInviteOtherList_codec);
            break;
          }
          case 82: {
            otherInviteMeList_.AddEntriesFrom(input, _repeated_otherInviteMeList_codec);
            break;
          }
          case 90: {
            recordList_.AddEntriesFrom(input, _repeated_recordList_codec);
            break;
          }
          case 98: {
            chatFriends_.AddEntriesFrom(input, _repeated_chatFriends_codec);
            break;
          }
          case 104: {
            IsPlayer = input.ReadBool();
            break;
          }
          case 112: {
            ChoosedActionId = input.ReadInt32();
            break;
          }
          case 122: {
            allSinglePeopleChatDataList_.AddEntriesFrom(input, _repeated_allSinglePeopleChatDataList_codec);
            break;
          }
          case 130:
          case 128: {
            validWithPeople_.AddEntriesFrom(input, _repeated_validWithPeople_codec);
            break;
          }
          case 136: {
            PlayerVocalRefusedMe = input.ReadBool();
            break;
          }
          case 144: {
            CurPlanWithPeople = input.ReadUInt64();
            break;
          }
          case 152: {
            ExamBattleCurExp = input.ReadInt32();
            break;
          }
          case 160: {
            ExamBattleCurLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///计划
  /// </summary>
  public sealed partial class PlanProtoData : pb::IMessage<PlanProtoData> {
    private static readonly pb::MessageParser<PlanProtoData> _parser = new pb::MessageParser<PlanProtoData>(() => new PlanProtoData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlanProtoData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanProtoData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanProtoData(PlanProtoData other) : this() {
      P1 = other.p1_ != null ? other.P1.Clone() : null;
      P2 = other.p2_ != null ? other.P2.Clone() : null;
      actionId_ = other.actionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanProtoData Clone() {
      return new PlanProtoData(this);
    }

    /// <summary>Field number for the "p1" field.</summary>
    public const int P1FieldNumber = 1;
    private global::RoleData.PeopleProtoData p1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.PeopleProtoData P1 {
      get { return p1_; }
      set {
        p1_ = value;
      }
    }

    /// <summary>Field number for the "p2" field.</summary>
    public const int P2FieldNumber = 2;
    private global::RoleData.PeopleProtoData p2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.PeopleProtoData P2 {
      get { return p2_; }
      set {
        p2_ = value;
      }
    }

    /// <summary>Field number for the "actionId" field.</summary>
    public const int ActionIdFieldNumber = 3;
    private int actionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionId {
      get { return actionId_; }
      set {
        actionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlanProtoData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlanProtoData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(P1, other.P1)) return false;
      if (!object.Equals(P2, other.P2)) return false;
      if (ActionId != other.ActionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (p1_ != null) hash ^= P1.GetHashCode();
      if (p2_ != null) hash ^= P2.GetHashCode();
      if (ActionId != 0) hash ^= ActionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (p1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(P1);
      }
      if (p2_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(P2);
      }
      if (ActionId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (p1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
      }
      if (p2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
      }
      if (ActionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlanProtoData other) {
      if (other == null) {
        return;
      }
      if (other.p1_ != null) {
        if (p1_ == null) {
          p1_ = new global::RoleData.PeopleProtoData();
        }
        P1.MergeFrom(other.P1);
      }
      if (other.p2_ != null) {
        if (p2_ == null) {
          p2_ = new global::RoleData.PeopleProtoData();
        }
        P2.MergeFrom(other.P2);
      }
      if (other.ActionId != 0) {
        ActionId = other.ActionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (p1_ == null) {
              p1_ = new global::RoleData.PeopleProtoData();
            }
            input.ReadMessage(p1_);
            break;
          }
          case 18: {
            if (p2_ == null) {
              p2_ = new global::RoleData.PeopleProtoData();
            }
            input.ReadMessage(p2_);
            break;
          }
          case 24: {
            ActionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///别人邀请我的数据
  /// </summary>
  public sealed partial class OtherInviteMeData : pb::IMessage<OtherInviteMeData> {
    private static readonly pb::MessageParser<OtherInviteMeData> _parser = new pb::MessageParser<OtherInviteMeData>(() => new OtherInviteMeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherInviteMeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherInviteMeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherInviteMeData(OtherInviteMeData other) : this() {
      People = other.people_ != null ? other.People.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherInviteMeData Clone() {
      return new OtherInviteMeData(this);
    }

    /// <summary>Field number for the "people" field.</summary>
    public const int PeopleFieldNumber = 1;
    private global::RoleData.PeopleProtoData people_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.PeopleProtoData People {
      get { return people_; }
      set {
        people_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtherInviteMeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtherInviteMeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(People, other.People)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (people_ != null) hash ^= People.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (people_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(People);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (people_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(People);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtherInviteMeData other) {
      if (other == null) {
        return;
      }
      if (other.people_ != null) {
        if (people_ == null) {
          people_ = new global::RoleData.PeopleProtoData();
        }
        People.MergeFrom(other.People);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (people_ == null) {
              people_ = new global::RoleData.PeopleProtoData();
            }
            input.ReadMessage(people_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///我邀请别人的数据
  /// </summary>
  public sealed partial class MeInviteOtherProtoData : pb::IMessage<MeInviteOtherProtoData> {
    private static readonly pb::MessageParser<MeInviteOtherProtoData> _parser = new pb::MessageParser<MeInviteOtherProtoData>(() => new MeInviteOtherProtoData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeInviteOtherProtoData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeInviteOtherProtoData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeInviteOtherProtoData(MeInviteOtherProtoData other) : this() {
      People = other.people_ != null ? other.People.Clone() : null;
      refused_ = other.refused_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeInviteOtherProtoData Clone() {
      return new MeInviteOtherProtoData(this);
    }

    /// <summary>Field number for the "people" field.</summary>
    public const int PeopleFieldNumber = 1;
    private global::RoleData.PeopleProtoData people_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.PeopleProtoData People {
      get { return people_; }
      set {
        people_ = value;
      }
    }

    /// <summary>Field number for the "refused" field.</summary>
    public const int RefusedFieldNumber = 2;
    private bool refused_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Refused {
      get { return refused_; }
      set {
        refused_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeInviteOtherProtoData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeInviteOtherProtoData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(People, other.People)) return false;
      if (Refused != other.Refused) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (people_ != null) hash ^= People.GetHashCode();
      if (Refused != false) hash ^= Refused.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (people_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(People);
      }
      if (Refused != false) {
        output.WriteRawTag(16);
        output.WriteBool(Refused);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (people_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(People);
      }
      if (Refused != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeInviteOtherProtoData other) {
      if (other == null) {
        return;
      }
      if (other.people_ != null) {
        if (people_ == null) {
          people_ = new global::RoleData.PeopleProtoData();
        }
        People.MergeFrom(other.People);
      }
      if (other.Refused != false) {
        Refused = other.Refused;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (people_ == null) {
              people_ = new global::RoleData.PeopleProtoData();
            }
            input.ReadMessage(people_);
            break;
          }
          case 16: {
            Refused = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
