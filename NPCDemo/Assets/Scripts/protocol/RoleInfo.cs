// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RoleInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RoleData {

  /// <summary>Holder for reflection information generated from RoleInfo.proto</summary>
  public static partial class RoleInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for RoleInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoleInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Sb2xlSW5mby5wcm90bxIIUm9sZURhdGEiqgEKCEdhbWVJbmZvEi8KDHBs",
            "YXllclBlb3BsZRgBIAEoCzIZLlJvbGVEYXRhLlBlb3BsZVByb3RvRGF0YRIw",
            "Cg1hbGxQZW9wbGVMaXN0GAIgAygLMhkuUm9sZURhdGEuUGVvcGxlUHJvdG9E",
            "YXRhEiQKCHRpbWVEYXRhGAMgASgLMhIuUm9sZURhdGEuVGltZURhdGESFQoN",
            "Y3VyR2FtZU1vZHVsZRgEIAEoBSJzCghUaW1lRGF0YRIMCgR5ZWFyGAEgASgF",
            "Eg0KBW1vbnRoGAIgASgFEgsKA2RheRgDIAEoBRISCgp0aGVXZWVrRGF5GAQg",
            "ASgFEhIKCmRheVByb2Nlc3MYBSABKAISFQoNZGF5QmVmb3JlRXhhbRgGIAEo",
            "BSJeCgxQcm9wZXJ0eURhdGESFgoOcHJvcGVydHlJZExpc3QYASADKAUSNgoQ",
            "cHJvcGVydHlEYXRhTGlzdBgCIAMoCzIcLlJvbGVEYXRhLlNpbmdsZVByb3Bl",
            "cnR5RGF0YSJUChJTaW5nbGVQcm9wZXJ0eURhdGESEgoKcHJvcGVydHlJZBgB",
            "IAEoBRITCgtwcm9wZXJ0eU51bRgCIAEoBRIVCg1wcm9wZXJ0eUxpbWl0GAMg",
            "ASgFIuoCCg9QZW9wbGVQcm90b0RhdGESDgoGb25seUlkGAEgASgEEiwKDHBy",
            "b3BlcnR5RGF0YRgCIAEoCzIWLlJvbGVEYXRhLlByb3BlcnR5RGF0YRIfChdz",
            "ZW5zZWRPdGhlclBlb3BsZUlkTGlzdBgDIAMoBBIrCiNmcmllbmRsaW5lc3NU",
            "b1NlbnNlZE90aGVyUGVvcGxlTGlzdBgEIAMoBRIOCgZnZW5kZXIYBSABKAUS",
            "DAoEbmFtZRgGIAEoCRIQCghhY3Rpb25JZBgHIAEoBRIbChNmaW5pc2hJbnZp",
            "dGVQcm9jZXNzGAggASgIEjQKEW1lSW52aXRlT3RoZXJMaXN0GAkgAygLMhku",
            "Um9sZURhdGEuUGVvcGxlUHJvdG9EYXRhEjQKEW90aGVySW52aXRlTWVMaXN0",
            "GAogAygLMhkuUm9sZURhdGEuUGVvcGxlUHJvdG9EYXRhEhIKCnJlY29yZExp",
            "c3QYCyADKAkiPgoRT3RoZXJJbnZpdGVNZURhdGESKQoGcGVvcGxlGAEgASgL",
            "MhkuUm9sZURhdGEuUGVvcGxlUHJvdG9EYXRhIlQKFk1lSW52aXRlT3RoZXJQ",
            "cm90b0RhdGESKQoGcGVvcGxlGAEgASgLMhkuUm9sZURhdGEuUGVvcGxlUHJv",
            "dG9EYXRhEg8KB3JlZnVzZWQYAiABKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.GameInfo), global::RoleData.GameInfo.Parser, new[]{ "PlayerPeople", "AllPeopleList", "TimeData", "CurGameModule" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.TimeData), global::RoleData.TimeData.Parser, new[]{ "Year", "Month", "Day", "TheWeekDay", "DayProcess", "DayBeforeExam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.PropertyData), global::RoleData.PropertyData.Parser, new[]{ "PropertyIdList", "PropertyDataList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.SinglePropertyData), global::RoleData.SinglePropertyData.Parser, new[]{ "PropertyId", "PropertyNum", "PropertyLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.PeopleProtoData), global::RoleData.PeopleProtoData.Parser, new[]{ "OnlyId", "PropertyData", "SensedOtherPeopleIdList", "FriendlinessToSensedOtherPeopleList", "Gender", "Name", "ActionId", "FinishInviteProcess", "MeInviteOtherList", "OtherInviteMeList", "RecordList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.OtherInviteMeData), global::RoleData.OtherInviteMeData.Parser, new[]{ "People" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RoleData.MeInviteOtherProtoData), global::RoleData.MeInviteOtherProtoData.Parser, new[]{ "People", "Refused" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///游戏基本信息
  /// </summary>
  public sealed partial class GameInfo : pb::IMessage<GameInfo> {
    private static readonly pb::MessageParser<GameInfo> _parser = new pb::MessageParser<GameInfo>(() => new GameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo(GameInfo other) : this() {
      PlayerPeople = other.playerPeople_ != null ? other.PlayerPeople.Clone() : null;
      allPeopleList_ = other.allPeopleList_.Clone();
      TimeData = other.timeData_ != null ? other.TimeData.Clone() : null;
      curGameModule_ = other.curGameModule_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo Clone() {
      return new GameInfo(this);
    }

    /// <summary>Field number for the "playerPeople" field.</summary>
    public const int PlayerPeopleFieldNumber = 1;
    private global::RoleData.PeopleProtoData playerPeople_;
    /// <summary>
    ///玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.PeopleProtoData PlayerPeople {
      get { return playerPeople_; }
      set {
        playerPeople_ = value;
      }
    }

    /// <summary>Field number for the "allPeopleList" field.</summary>
    public const int AllPeopleListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RoleData.PeopleProtoData> _repeated_allPeopleList_codec
        = pb::FieldCodec.ForMessage(18, global::RoleData.PeopleProtoData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.PeopleProtoData> allPeopleList_ = new pbc::RepeatedField<global::RoleData.PeopleProtoData>();
    /// <summary>
    ///所有角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.PeopleProtoData> AllPeopleList {
      get { return allPeopleList_; }
    }

    /// <summary>Field number for the "timeData" field.</summary>
    public const int TimeDataFieldNumber = 3;
    private global::RoleData.TimeData timeData_;
    /// <summary>
    ///日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.TimeData TimeData {
      get { return timeData_; }
      set {
        timeData_ = value;
      }
    }

    /// <summary>Field number for the "curGameModule" field.</summary>
    public const int CurGameModuleFieldNumber = 4;
    private int curGameModule_;
    /// <summary>
    ///当前是哪个游戏模块
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurGameModule {
      get { return curGameModule_; }
      set {
        curGameModule_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerPeople, other.PlayerPeople)) return false;
      if(!allPeopleList_.Equals(other.allPeopleList_)) return false;
      if (!object.Equals(TimeData, other.TimeData)) return false;
      if (CurGameModule != other.CurGameModule) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerPeople_ != null) hash ^= PlayerPeople.GetHashCode();
      hash ^= allPeopleList_.GetHashCode();
      if (timeData_ != null) hash ^= TimeData.GetHashCode();
      if (CurGameModule != 0) hash ^= CurGameModule.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerPeople_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerPeople);
      }
      allPeopleList_.WriteTo(output, _repeated_allPeopleList_codec);
      if (timeData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TimeData);
      }
      if (CurGameModule != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurGameModule);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerPeople_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerPeople);
      }
      size += allPeopleList_.CalculateSize(_repeated_allPeopleList_codec);
      if (timeData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeData);
      }
      if (CurGameModule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurGameModule);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInfo other) {
      if (other == null) {
        return;
      }
      if (other.playerPeople_ != null) {
        if (playerPeople_ == null) {
          playerPeople_ = new global::RoleData.PeopleProtoData();
        }
        PlayerPeople.MergeFrom(other.PlayerPeople);
      }
      allPeopleList_.Add(other.allPeopleList_);
      if (other.timeData_ != null) {
        if (timeData_ == null) {
          timeData_ = new global::RoleData.TimeData();
        }
        TimeData.MergeFrom(other.TimeData);
      }
      if (other.CurGameModule != 0) {
        CurGameModule = other.CurGameModule;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerPeople_ == null) {
              playerPeople_ = new global::RoleData.PeopleProtoData();
            }
            input.ReadMessage(playerPeople_);
            break;
          }
          case 18: {
            allPeopleList_.AddEntriesFrom(input, _repeated_allPeopleList_codec);
            break;
          }
          case 26: {
            if (timeData_ == null) {
              timeData_ = new global::RoleData.TimeData();
            }
            input.ReadMessage(timeData_);
            break;
          }
          case 32: {
            CurGameModule = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///日期
  /// </summary>
  public sealed partial class TimeData : pb::IMessage<TimeData> {
    private static readonly pb::MessageParser<TimeData> _parser = new pb::MessageParser<TimeData>(() => new TimeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeData(TimeData other) : this() {
      year_ = other.year_;
      month_ = other.month_;
      day_ = other.day_;
      theWeekDay_ = other.theWeekDay_;
      dayProcess_ = other.dayProcess_;
      dayBeforeExam_ = other.dayBeforeExam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeData Clone() {
      return new TimeData(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    /// <summary>
    ///哪一年
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private int month_;
    /// <summary>
    ///哪一月
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 3;
    private int day_;
    /// <summary>
    ///哪一天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "theWeekDay" field.</summary>
    public const int TheWeekDayFieldNumber = 4;
    private int theWeekDay_;
    /// <summary>
    ///周几
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TheWeekDay {
      get { return theWeekDay_; }
      set {
        theWeekDay_ = value;
      }
    }

    /// <summary>Field number for the "dayProcess" field.</summary>
    public const int DayProcessFieldNumber = 5;
    private float dayProcess_;
    /// <summary>
    ///今天进行到百分之多少了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DayProcess {
      get { return dayProcess_; }
      set {
        dayProcess_ = value;
      }
    }

    /// <summary>Field number for the "dayBeforeExam" field.</summary>
    public const int DayBeforeExamFieldNumber = 6;
    private int dayBeforeExam_;
    /// <summary>
    ///距离高考还有xx天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayBeforeExam {
      get { return dayBeforeExam_; }
      set {
        dayBeforeExam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (Day != other.Day) return false;
      if (TheWeekDay != other.TheWeekDay) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayProcess, other.DayProcess)) return false;
      if (DayBeforeExam != other.DayBeforeExam) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (TheWeekDay != 0) hash ^= TheWeekDay.GetHashCode();
      if (DayProcess != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayProcess);
      if (DayBeforeExam != 0) hash ^= DayBeforeExam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Month);
      }
      if (Day != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Day);
      }
      if (TheWeekDay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TheWeekDay);
      }
      if (DayProcess != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DayProcess);
      }
      if (DayBeforeExam != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DayBeforeExam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Month);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (TheWeekDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TheWeekDay);
      }
      if (DayProcess != 0F) {
        size += 1 + 4;
      }
      if (DayBeforeExam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayBeforeExam);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeData other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.TheWeekDay != 0) {
        TheWeekDay = other.TheWeekDay;
      }
      if (other.DayProcess != 0F) {
        DayProcess = other.DayProcess;
      }
      if (other.DayBeforeExam != 0) {
        DayBeforeExam = other.DayBeforeExam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            Month = input.ReadInt32();
            break;
          }
          case 24: {
            Day = input.ReadInt32();
            break;
          }
          case 32: {
            TheWeekDay = input.ReadInt32();
            break;
          }
          case 45: {
            DayProcess = input.ReadFloat();
            break;
          }
          case 48: {
            DayBeforeExam = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///属性 
  /// </summary>
  public sealed partial class PropertyData : pb::IMessage<PropertyData> {
    private static readonly pb::MessageParser<PropertyData> _parser = new pb::MessageParser<PropertyData>(() => new PropertyData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyData(PropertyData other) : this() {
      propertyIdList_ = other.propertyIdList_.Clone();
      propertyDataList_ = other.propertyDataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyData Clone() {
      return new PropertyData(this);
    }

    /// <summary>Field number for the "propertyIdList" field.</summary>
    public const int PropertyIdListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_propertyIdList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> propertyIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PropertyIdList {
      get { return propertyIdList_; }
    }

    /// <summary>Field number for the "propertyDataList" field.</summary>
    public const int PropertyDataListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RoleData.SinglePropertyData> _repeated_propertyDataList_codec
        = pb::FieldCodec.ForMessage(18, global::RoleData.SinglePropertyData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.SinglePropertyData> propertyDataList_ = new pbc::RepeatedField<global::RoleData.SinglePropertyData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.SinglePropertyData> PropertyDataList {
      get { return propertyDataList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!propertyIdList_.Equals(other.propertyIdList_)) return false;
      if(!propertyDataList_.Equals(other.propertyDataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= propertyIdList_.GetHashCode();
      hash ^= propertyDataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      propertyIdList_.WriteTo(output, _repeated_propertyIdList_codec);
      propertyDataList_.WriteTo(output, _repeated_propertyDataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += propertyIdList_.CalculateSize(_repeated_propertyIdList_codec);
      size += propertyDataList_.CalculateSize(_repeated_propertyDataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertyData other) {
      if (other == null) {
        return;
      }
      propertyIdList_.Add(other.propertyIdList_);
      propertyDataList_.Add(other.propertyDataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            propertyIdList_.AddEntriesFrom(input, _repeated_propertyIdList_codec);
            break;
          }
          case 18: {
            propertyDataList_.AddEntriesFrom(input, _repeated_propertyDataList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单个属性
  /// </summary>
  public sealed partial class SinglePropertyData : pb::IMessage<SinglePropertyData> {
    private static readonly pb::MessageParser<SinglePropertyData> _parser = new pb::MessageParser<SinglePropertyData>(() => new SinglePropertyData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SinglePropertyData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePropertyData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePropertyData(SinglePropertyData other) : this() {
      propertyId_ = other.propertyId_;
      propertyNum_ = other.propertyNum_;
      propertyLimit_ = other.propertyLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePropertyData Clone() {
      return new SinglePropertyData(this);
    }

    /// <summary>Field number for the "propertyId" field.</summary>
    public const int PropertyIdFieldNumber = 1;
    private int propertyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropertyId {
      get { return propertyId_; }
      set {
        propertyId_ = value;
      }
    }

    /// <summary>Field number for the "propertyNum" field.</summary>
    public const int PropertyNumFieldNumber = 2;
    private int propertyNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropertyNum {
      get { return propertyNum_; }
      set {
        propertyNum_ = value;
      }
    }

    /// <summary>Field number for the "propertyLimit" field.</summary>
    public const int PropertyLimitFieldNumber = 3;
    private int propertyLimit_;
    /// <summary>
    ///上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropertyLimit {
      get { return propertyLimit_; }
      set {
        propertyLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SinglePropertyData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SinglePropertyData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyId != other.PropertyId) return false;
      if (PropertyNum != other.PropertyNum) return false;
      if (PropertyLimit != other.PropertyLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyId != 0) hash ^= PropertyId.GetHashCode();
      if (PropertyNum != 0) hash ^= PropertyNum.GetHashCode();
      if (PropertyLimit != 0) hash ^= PropertyLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropertyId);
      }
      if (PropertyNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropertyNum);
      }
      if (PropertyLimit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PropertyLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyId);
      }
      if (PropertyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyNum);
      }
      if (PropertyLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SinglePropertyData other) {
      if (other == null) {
        return;
      }
      if (other.PropertyId != 0) {
        PropertyId = other.PropertyId;
      }
      if (other.PropertyNum != 0) {
        PropertyNum = other.PropertyNum;
      }
      if (other.PropertyLimit != 0) {
        PropertyLimit = other.PropertyLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropertyId = input.ReadInt32();
            break;
          }
          case 16: {
            PropertyNum = input.ReadInt32();
            break;
          }
          case 24: {
            PropertyLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色数据
  /// </summary>
  public sealed partial class PeopleProtoData : pb::IMessage<PeopleProtoData> {
    private static readonly pb::MessageParser<PeopleProtoData> _parser = new pb::MessageParser<PeopleProtoData>(() => new PeopleProtoData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeopleProtoData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeopleProtoData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeopleProtoData(PeopleProtoData other) : this() {
      onlyId_ = other.onlyId_;
      PropertyData = other.propertyData_ != null ? other.PropertyData.Clone() : null;
      sensedOtherPeopleIdList_ = other.sensedOtherPeopleIdList_.Clone();
      friendlinessToSensedOtherPeopleList_ = other.friendlinessToSensedOtherPeopleList_.Clone();
      gender_ = other.gender_;
      name_ = other.name_;
      actionId_ = other.actionId_;
      finishInviteProcess_ = other.finishInviteProcess_;
      meInviteOtherList_ = other.meInviteOtherList_.Clone();
      otherInviteMeList_ = other.otherInviteMeList_.Clone();
      recordList_ = other.recordList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeopleProtoData Clone() {
      return new PeopleProtoData(this);
    }

    /// <summary>Field number for the "onlyId" field.</summary>
    public const int OnlyIdFieldNumber = 1;
    private ulong onlyId_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OnlyId {
      get { return onlyId_; }
      set {
        onlyId_ = value;
      }
    }

    /// <summary>Field number for the "propertyData" field.</summary>
    public const int PropertyDataFieldNumber = 2;
    private global::RoleData.PropertyData propertyData_;
    /// <summary>
    ///属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.PropertyData PropertyData {
      get { return propertyData_; }
      set {
        propertyData_ = value;
      }
    }

    /// <summary>Field number for the "sensedOtherPeopleIdList" field.</summary>
    public const int SensedOtherPeopleIdListFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_sensedOtherPeopleIdList_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> sensedOtherPeopleIdList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///感受到的其他人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> SensedOtherPeopleIdList {
      get { return sensedOtherPeopleIdList_; }
    }

    /// <summary>Field number for the "friendlinessToSensedOtherPeopleList" field.</summary>
    public const int FriendlinessToSensedOtherPeopleListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_friendlinessToSensedOtherPeopleList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> friendlinessToSensedOtherPeopleList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///对感受到的人的好感度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FriendlinessToSensedOtherPeopleList {
      get { return friendlinessToSensedOtherPeopleList_; }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 5;
    private int gender_;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    /// <summary>
    ///姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actionId" field.</summary>
    public const int ActionIdFieldNumber = 7;
    private int actionId_;
    /// <summary>
    ///想做什么
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionId {
      get { return actionId_; }
      set {
        actionId_ = value;
      }
    }

    /// <summary>Field number for the "finishInviteProcess" field.</summary>
    public const int FinishInviteProcessFieldNumber = 8;
    private bool finishInviteProcess_;
    /// <summary>
    ///结束邀约进程
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FinishInviteProcess {
      get { return finishInviteProcess_; }
      set {
        finishInviteProcess_ = value;
      }
    }

    /// <summary>Field number for the "meInviteOtherList" field.</summary>
    public const int MeInviteOtherListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::RoleData.PeopleProtoData> _repeated_meInviteOtherList_codec
        = pb::FieldCodec.ForMessage(74, global::RoleData.PeopleProtoData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.PeopleProtoData> meInviteOtherList_ = new pbc::RepeatedField<global::RoleData.PeopleProtoData>();
    /// <summary>
    ///我邀请的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.PeopleProtoData> MeInviteOtherList {
      get { return meInviteOtherList_; }
    }

    /// <summary>Field number for the "otherInviteMeList" field.</summary>
    public const int OtherInviteMeListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::RoleData.PeopleProtoData> _repeated_otherInviteMeList_codec
        = pb::FieldCodec.ForMessage(82, global::RoleData.PeopleProtoData.Parser);
    private readonly pbc::RepeatedField<global::RoleData.PeopleProtoData> otherInviteMeList_ = new pbc::RepeatedField<global::RoleData.PeopleProtoData>();
    /// <summary>
    ///邀请我的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoleData.PeopleProtoData> OtherInviteMeList {
      get { return otherInviteMeList_; }
    }

    /// <summary>Field number for the "recordList" field.</summary>
    public const int RecordListFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_recordList_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> recordList_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecordList {
      get { return recordList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeopleProtoData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeopleProtoData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlyId != other.OnlyId) return false;
      if (!object.Equals(PropertyData, other.PropertyData)) return false;
      if(!sensedOtherPeopleIdList_.Equals(other.sensedOtherPeopleIdList_)) return false;
      if(!friendlinessToSensedOtherPeopleList_.Equals(other.friendlinessToSensedOtherPeopleList_)) return false;
      if (Gender != other.Gender) return false;
      if (Name != other.Name) return false;
      if (ActionId != other.ActionId) return false;
      if (FinishInviteProcess != other.FinishInviteProcess) return false;
      if(!meInviteOtherList_.Equals(other.meInviteOtherList_)) return false;
      if(!otherInviteMeList_.Equals(other.otherInviteMeList_)) return false;
      if(!recordList_.Equals(other.recordList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlyId != 0UL) hash ^= OnlyId.GetHashCode();
      if (propertyData_ != null) hash ^= PropertyData.GetHashCode();
      hash ^= sensedOtherPeopleIdList_.GetHashCode();
      hash ^= friendlinessToSensedOtherPeopleList_.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ActionId != 0) hash ^= ActionId.GetHashCode();
      if (FinishInviteProcess != false) hash ^= FinishInviteProcess.GetHashCode();
      hash ^= meInviteOtherList_.GetHashCode();
      hash ^= otherInviteMeList_.GetHashCode();
      hash ^= recordList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlyId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(OnlyId);
      }
      if (propertyData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PropertyData);
      }
      sensedOtherPeopleIdList_.WriteTo(output, _repeated_sensedOtherPeopleIdList_codec);
      friendlinessToSensedOtherPeopleList_.WriteTo(output, _repeated_friendlinessToSensedOtherPeopleList_codec);
      if (Gender != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Gender);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (ActionId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ActionId);
      }
      if (FinishInviteProcess != false) {
        output.WriteRawTag(64);
        output.WriteBool(FinishInviteProcess);
      }
      meInviteOtherList_.WriteTo(output, _repeated_meInviteOtherList_codec);
      otherInviteMeList_.WriteTo(output, _repeated_otherInviteMeList_codec);
      recordList_.WriteTo(output, _repeated_recordList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlyId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OnlyId);
      }
      if (propertyData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyData);
      }
      size += sensedOtherPeopleIdList_.CalculateSize(_repeated_sensedOtherPeopleIdList_codec);
      size += friendlinessToSensedOtherPeopleList_.CalculateSize(_repeated_friendlinessToSensedOtherPeopleList_codec);
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ActionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionId);
      }
      if (FinishInviteProcess != false) {
        size += 1 + 1;
      }
      size += meInviteOtherList_.CalculateSize(_repeated_meInviteOtherList_codec);
      size += otherInviteMeList_.CalculateSize(_repeated_otherInviteMeList_codec);
      size += recordList_.CalculateSize(_repeated_recordList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeopleProtoData other) {
      if (other == null) {
        return;
      }
      if (other.OnlyId != 0UL) {
        OnlyId = other.OnlyId;
      }
      if (other.propertyData_ != null) {
        if (propertyData_ == null) {
          propertyData_ = new global::RoleData.PropertyData();
        }
        PropertyData.MergeFrom(other.PropertyData);
      }
      sensedOtherPeopleIdList_.Add(other.sensedOtherPeopleIdList_);
      friendlinessToSensedOtherPeopleList_.Add(other.friendlinessToSensedOtherPeopleList_);
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ActionId != 0) {
        ActionId = other.ActionId;
      }
      if (other.FinishInviteProcess != false) {
        FinishInviteProcess = other.FinishInviteProcess;
      }
      meInviteOtherList_.Add(other.meInviteOtherList_);
      otherInviteMeList_.Add(other.otherInviteMeList_);
      recordList_.Add(other.recordList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OnlyId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (propertyData_ == null) {
              propertyData_ = new global::RoleData.PropertyData();
            }
            input.ReadMessage(propertyData_);
            break;
          }
          case 26:
          case 24: {
            sensedOtherPeopleIdList_.AddEntriesFrom(input, _repeated_sensedOtherPeopleIdList_codec);
            break;
          }
          case 34:
          case 32: {
            friendlinessToSensedOtherPeopleList_.AddEntriesFrom(input, _repeated_friendlinessToSensedOtherPeopleList_codec);
            break;
          }
          case 40: {
            Gender = input.ReadInt32();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 56: {
            ActionId = input.ReadInt32();
            break;
          }
          case 64: {
            FinishInviteProcess = input.ReadBool();
            break;
          }
          case 74: {
            meInviteOtherList_.AddEntriesFrom(input, _repeated_meInviteOtherList_codec);
            break;
          }
          case 82: {
            otherInviteMeList_.AddEntriesFrom(input, _repeated_otherInviteMeList_codec);
            break;
          }
          case 90: {
            recordList_.AddEntriesFrom(input, _repeated_recordList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///别人邀请我的数据
  /// </summary>
  public sealed partial class OtherInviteMeData : pb::IMessage<OtherInviteMeData> {
    private static readonly pb::MessageParser<OtherInviteMeData> _parser = new pb::MessageParser<OtherInviteMeData>(() => new OtherInviteMeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherInviteMeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherInviteMeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherInviteMeData(OtherInviteMeData other) : this() {
      People = other.people_ != null ? other.People.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherInviteMeData Clone() {
      return new OtherInviteMeData(this);
    }

    /// <summary>Field number for the "people" field.</summary>
    public const int PeopleFieldNumber = 1;
    private global::RoleData.PeopleProtoData people_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.PeopleProtoData People {
      get { return people_; }
      set {
        people_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtherInviteMeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtherInviteMeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(People, other.People)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (people_ != null) hash ^= People.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (people_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(People);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (people_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(People);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtherInviteMeData other) {
      if (other == null) {
        return;
      }
      if (other.people_ != null) {
        if (people_ == null) {
          people_ = new global::RoleData.PeopleProtoData();
        }
        People.MergeFrom(other.People);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (people_ == null) {
              people_ = new global::RoleData.PeopleProtoData();
            }
            input.ReadMessage(people_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///我邀请别人的数据
  /// </summary>
  public sealed partial class MeInviteOtherProtoData : pb::IMessage<MeInviteOtherProtoData> {
    private static readonly pb::MessageParser<MeInviteOtherProtoData> _parser = new pb::MessageParser<MeInviteOtherProtoData>(() => new MeInviteOtherProtoData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeInviteOtherProtoData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RoleData.RoleInfoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeInviteOtherProtoData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeInviteOtherProtoData(MeInviteOtherProtoData other) : this() {
      People = other.people_ != null ? other.People.Clone() : null;
      refused_ = other.refused_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeInviteOtherProtoData Clone() {
      return new MeInviteOtherProtoData(this);
    }

    /// <summary>Field number for the "people" field.</summary>
    public const int PeopleFieldNumber = 1;
    private global::RoleData.PeopleProtoData people_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleData.PeopleProtoData People {
      get { return people_; }
      set {
        people_ = value;
      }
    }

    /// <summary>Field number for the "refused" field.</summary>
    public const int RefusedFieldNumber = 2;
    private bool refused_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Refused {
      get { return refused_; }
      set {
        refused_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeInviteOtherProtoData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeInviteOtherProtoData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(People, other.People)) return false;
      if (Refused != other.Refused) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (people_ != null) hash ^= People.GetHashCode();
      if (Refused != false) hash ^= Refused.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (people_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(People);
      }
      if (Refused != false) {
        output.WriteRawTag(16);
        output.WriteBool(Refused);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (people_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(People);
      }
      if (Refused != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeInviteOtherProtoData other) {
      if (other == null) {
        return;
      }
      if (other.people_ != null) {
        if (people_ == null) {
          people_ = new global::RoleData.PeopleProtoData();
        }
        People.MergeFrom(other.People);
      }
      if (other.Refused != false) {
        Refused = other.Refused;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (people_ == null) {
              people_ = new global::RoleData.PeopleProtoData();
            }
            input.ReadMessage(people_);
            break;
          }
          case 16: {
            Refused = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
